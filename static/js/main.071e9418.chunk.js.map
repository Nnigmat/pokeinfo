{"version":3,"sources":["constants.js","PokemonItem.js","InputForm.js","NavBar.js","App.js","index.js"],"names":["url","PokemonItem","props","fetchPokemon","name","fetch","then","response","json","data","flavor_text","flavor_text_entries","find","entry","language","state","names","setState","description","loading","pokemonId","pokemon","sprites","types","this","prevProps","map","type","key","cardImg","front_default","cardTitle","className","style","width","src","alt","textTransform","React","Component","InputForm","onSubmit","e","preventDefault","stopPropagation","handleSubmit","onKeyDown","value","newPokemon","onChange","handleChange","placeholder","NavBar","to","curLanguage","languages","l","toUpperCase","App","event","target","error","pokemons","toLowerCase","handleRandomPokemonSubmit","Math","floor","random","count","id","ok","Error","evolution_chain","data2","evolves_to","chain","push","species","curPokemon","catch","err","console","log","message","finally","results","lang","role","content","curLanugage","path","exact","onClick","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.071e9418.chunk.js","sourcesContent":["export const url = 'https://pokeapi.co/api/v2/'\n","import React from 'react'\n\nimport { url } from './constants'\n\nclass PokemonItem extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            loading: false,\n            pokemonId: '',\n            pokemon: {},\n            sprites: {},\n            types: [],\n            description: '',\n            language: props.language,\n        }\n    }\n\n    componentDidMount() {\n        this.setState({loading: true, pokemonId: this.props.pokemon.name})\n        fetch(url + 'pokemon/' + this.props.pokemon.name)\n            .then(response => response.json())\n            .then(data => {\n                this.setState({\n                    pokemon: data,\n                    sprites: data.sprites,\n                    types: data.types,\n                    loading: false,\n                })\n            })\n\n        this.fetchPokemon(this.props.pokemon.name)\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.language !== this.props.language) {\n            this.setState({language: this.props.language})\n            this.fetchPokemon(this.state.pokemonId)\n        }\n    }\n\n    fetchPokemon = (name) => {\n        fetch(url + 'pokemon-species/' + name)\n            .then(response => response.json())\n            .then(data => {\n                const flavor_text = data.flavor_text_entries.find(entry => entry.language.name === this.state.language)\n                const name = data.names.find(name => name.language.name === this.state.language)\n                this.setState({\n                    description: flavor_text ? flavor_text.flavor_text : 'Chosen language has no description for this pokemon',\n                    name: name ? name.name : 'Error'\n                })\n            })\n    }\n\n    render() {\n        const types = this.state.types.map(type => <span key={type.type.name}> {type.type.name} </span>)\n        const cardImg = this.state.sprites.front_default\n        const cardTitle = this.state.name\n        \n        return (\n            <div className=\"mx-auto\">\n                <div className=\"card shadow rounded p-3 mb-5 bg-white\" style={{width: '20rem'}}>\n                    <img src={cardImg} className=\"card-img-top\" alt={this.state.name}/>\n                  <div className=\"card-body\">\n                    <h3 className=\"card-title text-center\" style={{textTransform: 'capitalize'}}>{cardTitle}</h3>\n                    <p className=\"card-text\">{this.state.description}</p>\n                  </div>\n                 <div className=\"card-body\">\n                      <ul className=\"list-group list-group-flush\">\n                        <li className=\"list-group-item\">Types: <span style={{textTransform: 'capitalize'}} >{types}</span></li>\n                      </ul>\n                  </div>\n                </div>  \n            </div>\n        )\n    }\n}\n\nexport default PokemonItem\n","import React from 'react'\n\n\nexport default function InputForm(props) {\n    return (\n        <form \n            onSubmit={e => {\n                e.preventDefault()\n                e.stopPropagation()\n                props.handleSubmit(e)}\n            } \n            onKeyDown={e => {\n                if (e.key === 'Enter') {\n                    e.preventDefault()\n                    props.handleSubmit(e)\n                }\n            }}\n            className=\"form-inline\"\n        >\n            <div className=\"form-group mr-2\">\n                <input \n                    type=\"text\"\n                    name=\"newPokemon\"\n                    className=\"form-control\"\n                    value={props.newPokemon}\n                    onChange={props.handleChange}\n                    placeholder=\"Pokemon name\"\n                />\n            </div>\n            <button type=\"submit\" className=\"form-group btn btn-primary mr-2\">Search pokemon</button>\n        </form>\n    )\n}\n\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nfunction NavBar(props) {\n    return (\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n            <Link to=\"/\" className=\"navbar-brand\">PokeInfo</Link>\n            <ul className=\"navbar-nav ml-auto\">\n                <li className=\"nav-item active\">\n                    <Link to=\"/about\" className=\"nav-link\"> About </Link>\n                </li>\n                <li>\n                    <select name=\"curLanguage\" value={props.curLanguage} onChange={props.handleChange} className=\"custom-select nav-item\">\n                        {props.languages.map(l => <option key={l} value={l}>{l.toUpperCase()}</option>)}\n                    </select>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default NavBar\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\n\nimport PokemonItem from './PokemonItem'\nimport InputForm from './InputForm'\nimport NavBar from './NavBar'\n\nimport { url } from './constants'\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            loading: false,\n            error: false,\n            newPokemon: '',\n            curPokemon: '',\n            pokemons: [],\n            curLanguage: 'en',\n            languages: ['en', 'ja']\n        }\n    }\n\n    componentDidMount() {\n        fetch(url + 'language')\n            .then(response => response.json())\n            .then(data => {\n                this.setState({languages: data.results.map(lang => lang.name)})\n            })\n    }\n\n    handleChange = (event) => {\n        const {name, value} = event.target\n        this.setState({\n            [name]: value\n        })\n    }\n\n    handleSubmit = () => {\n        this.setState({loading: true, error: false, pokemons: []})\n        this.fetchPokemon(this.state.newPokemon.toLowerCase())\n    }\n\n    handleRandomPokemonSubmit = () => {\n        this.setState({loading: true, error: false, pokemons: []})\n        fetch(url + 'pokemon')\n            .then(response => response.json())\n            .then(data => {\n                const pokemonId = Math.floor(Math.random() * data.count) + 1\n                this.fetchPokemon(pokemonId)\n            })\n    }\n\n    fetchPokemon = (id) => {\n        // Get evolution chain of pokemon\n        fetch(url + 'pokemon-species/' + id)\n            .then(response => {\n                if (!response.ok) {\n                    throw new Error('Pokemon does not exists')\n                }\n                return response.json() })\n            .then(data => {\n                fetch(data.evolution_chain.url)\n                    .then(response => response.json())\n                    .then(data2 => {\n                        let evolves_to = data2.chain\n                        let pokemons = []\n                        while (evolves_to != null) {\n                            pokemons.push(evolves_to.species)\n                            evolves_to = evolves_to.evolves_to[0]\n                        }\n                        this.setState({\n                            pokemons: pokemons,\n                            curPokemon: this.state.newPokemon,\n                        })\n                    })\n            })\n            .catch(err => {\n                console.log('Was faced error during execution:', err.message)\n                this.setState({error: true})\n            })\n            .finally(() => this.setState({loading: false}))       \n    }\n\n    render() {\n        const loading = <div className=\"d-flex justify-content-center\">\n                            <div className=\"spinner-border text-primary\" role=\"status\">\n                                <span className=\"sr-only\">Loading...</span>\n                            </div>\n                        </div>\n        const error = <div className=\"d-flex justify-content-center\">\n                            Sorry the error accured\n                      </div>\n        const content = this.state.pokemons.map(pokemon => \n            <PokemonItem key={pokemon.name} pokemon={pokemon} language={this.state.curLanguage}/>\n        )\n\n        return (\n            <Router>\n                <NavBar languages={this.state.languages} curLanugage={this.state.curLanguage} handleChange={this.handleChange}/>\n                <Route path=\"/\" exact>\n                    <br />\n                    <div className=\"form-inline justify-content-center mx-auto\">\n                        <InputForm \n                            newPokemon={this.state.newPokemon}\n                            handleChange={this.handleChange}\n                            handleSubmit={this.handleSubmit}\n                        />\n                        <button onClick={this.handleRandomPokemonSubmit} className=\"form-group mr-2 btn btn-primary\"> Get Random Pokemon</button>\n                    </div>\n                    <br />\n                    {this.state.loading ? loading : ''}\n                    {this.state.error ? error : ''}\n                    {content ? <div className=\"card-deck\">{content}</div> : ''}\n                </Route>\n                <Route path=\"/about\">\n                    Hi, this is about page\n                </Route>\n            </Router>\n            )\n    }\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}